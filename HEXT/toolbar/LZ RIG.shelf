<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="LZ RIG" label="LZ RIG">
    <memberTool name="flip bones Selectable flag"/>
    <memberTool name="Create FK Controll"/>
    <memberTool name="Create IK/FK Blend Controlls"/>
    <memberTool name="bone between nulls"/>
    <memberTool name="copy PreTranform"/>
    <memberTool name="create_twist_bones"/>
    <memberTool name="create static Hooks"/>
    <memberTool name="update curve CVs"/>
    <memberTool name="Create Fetch"/>
    <memberTool name="Xray"/>
    <memberTool name="sop_capture"/>
    <memberTool name="Add Controls On Curve"/>
    <memberTool name="extract_world_transform_to_null"/>
    <memberTool name="Copy World Transform"/>
    <memberTool name="Create null at pivot"/>
    <memberTool name="Fix Autorig"/>
    <memberTool name="Add Axis"/>
    <memberTool name="Stretch Chain Setup"/>
    <memberTool name="Fix Absolute Paths"/>
    <memberTool name="Extract Maya Bones"/>
    <memberTool name="LZ Create Spine"/>
    <memberTool name="LZ Corrective Bones"/>
    <memberTool name="LZ Bone Real Rotates"/>
    <memberTool name="LZ Export IK Rotations"/>
    <memberTool name="LZ SculptToEdit"/>
    <memberTool name="create hook bones from nulls"/>
    <memberTool name="LZ CleanParentRotates"/>
  </toolshelf>

  <tool name="flip bones Selectable flag" label="flip bones Selectable flag" icon="hicon:/SVGIcons.index?OBJ_autorig_leg.svg">
    <script scriptType="python"><![CDATA[editor = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
nodes = editor.pwd().children()
for node in nodes:
    if node.type().name() == 'bone':
        node.setSelectableInViewport(not node.isSelectableInViewport()) 


#if hou.selectedNodes() is not ():
#    nodes = hou.selectedNodes()[0].parent().children()
#    for node in nodes:
#        if node.type().name() == 'bone':
#            node.setSelectableInViewport(not node.isSelectableInViewport())    ]]></script>
  </tool>

  <tool name="Create FK Controll" label="Create FK Controlls" icon="hicon:/SVGIcons.index?OBJ_pathcv.svg">
    <script scriptType="python"><![CDATA[for n in hou.selectedNodes():
    if n.type().name() == 'bone':
                
        ctrl = n.inputs()[0].createOutputNode('null',n.name() + '_ctrl')
        
        if  n.inputs()[0].type().name() == 'bone':
            ctrl.parm('tz').set( -n.inputs()[0].parm('length').eval())
        
        ctrl.setPreTransform(n.preTransform() * ctrl.parmTransform())
        ctrl.setParmTransform(hou.Matrix4(1))
        
        ctrl.parm('rOrd').set(5)
        ctrl.parm('controltype').set(1)
        ctrl.setPosition(n.position() + hou.Vector2(2,0))
        
        n.parm('rx').setExpression('ch("../`$OS`_ctrl/rx")')
        n.parm('ry').setExpression('ch("../`$OS`_ctrl/ry")')
        n.parm('rz').setExpression('ch("../`$OS`_ctrl/rz")')
        
        n.setSelectableInViewport(0)
        
        ctrl.parmTuple('t').lock((1,1,1))
        ctrl.parmTuple('s').lock((1,1,1))
        ctrl.parmTuple('p').lock((1,1,1))
        
        ctrl.setColor(hou.Color(0.29,0.565,0.886))
        
        ]]></script>
  </tool>

  <tool name="Create IK/FK Blend Controlls" label="Create IK/FK Blend Controlls" icon="hicon:/SVGIcons.index?BUTTONS_add_constraints.svg">
    <script scriptType="python"><![CDATA[def fixSpareFolders(node):
    ptg = node.parmTemplateGroup()
    folders = ptg.entries()
    for folder in folders:
        folder.setFolderType(hou.folderType.Simple)
        ptg.replace(folder.name(),folder)
    node.setParmTemplateGroup(ptg) 


for chopnet in hou.selectedNodes():
    if chopnet.type().name() == 'chopnet':
        ptg = chopnet.parmTemplateGroup()
        ptg.clear()
        
        for n in chopnet.children():
            if n.type().name() == 'inversekin':
                name =  n.name()
                
                # add same parm on a controll
                ctrl = hou.node(n.parm("endaffectorpath").eval())                
                cprt_ptg = ctrl.parmTemplateGroup()
                cprt_ptg.clear()
                parm = hou.FloatParmTemplate(name,name,1,min=0, max=1,min_is_strict=True, max_is_strict=True)
                cprt_ptg.addParmTemplate(parm)
                ctrl.setParmTemplateGroup(cprt_ptg) 
                
                parm = hou.FloatParmTemplate(name,name,1,min=0, max=1,min_is_strict=True, max_is_strict=True)
                parm.setDefaultExpression(('ch("../' + ctrl.name() + "/" + parm.name() + '")',))
                ptg.addParmTemplate(parm)
                n.parm('blend').setExpression('ch("../$OS")')
                
                fixSpareFolders(ctrl)              
                                
                
        chopnet.setParmTemplateGroup(ptg) 
              
        



        
             
            
                
        ]]></script>
  </tool>

  <tool name="create_twist_bones" label="create_twist_bones" icon="hicon:/SVGIcons.index?SOP_capturemeta.svg">
    <helpText><![CDATA[""""Select start and end bone"""]]></helpText>
    <script scriptType="python"><![CDATA[import lzrig

def createTwistBone(parent,bone,rot,nbones):
    tw1 = parent.createOutputNode('bone',bone.name() + "_twist1")
    tw1.setPosition(parent.position() + hou.Vector2(0,-0.9))
    tw1.setColor(hou.Color(1,0.8,0))
    tw1.parm('length').set(bone.parm('length').eval() / nbones)
    tw1.useXray(1)
    tw1.setSelectableInViewport(0)
    tw1.parm('rz').set(rot)
    tw1.parm('rz').lock((1))  
    return tw1

def createTwistBonesSetup(bone,target,nbones):
    lzrig.extractIKBoneRotates(target,1)
    #create null node
    null = bone.createOutputNode("null",bone.name() + "_twist_hook")
    null.setPosition(bone.position() + hou.Vector2(-1.5,-1.15))
      
    ptg = null.parmTemplateGroup()
    parm = hou.FloatParmTemplate('rotate','Rotate',1)
    ptg.addParmTemplate(parm)
    null.setParmTemplateGroup(ptg)        

    rot = null.parm('rotate')
    rot.set(target.parm('irz'))
    rot.setExpression(rot.expression() + "*" + str(1.0/nbones))
    rot.lock((1))
    null.setDisplayFlag(0)
    
    twist = null
    for i in range(0,nbones):
        twist = createTwistBone(twist,bone,rot,nbones)

    
# MAIN
if len(hou.selectedNodes())>1:
    nbones = 4        
    bone = hou.selectedNodes()[0]
    target = hou.selectedNodes()[1]
    createTwistBonesSetup(bone,target,nbones)   
    bone = hou.selectedNodes()[0]
    target = hou.selectedNodes()[1]
    createTwistBonesSetup
          
         
    
    
## Old Way 
## DEPRECATED
def oldWay():    
    for bone in hou.selectedNodes():
        if bone.type().name() == 'bone':
            bone.setDisplayFlag(0)
        
            parent = bone.inputs()[0]
            tw1 = createTwistBone(parent,bone)
            tw1.setPosition(bone.position() + hou.Vector2(2,0))
            tw2 = createTwistBone(tw1,bone)
            tw3 = createTwistBone(tw2,bone)
            tw4 = createTwistBone(tw3,bone)
            
            chopnet = bone.parent().createNode('chopnet',tw1.name() + "_chopnet")
            chopnet.setPosition(tw1.position() + hou.Vector2(2,0))
            
            #null = bone.parent().createNode('null',tw1.name() + "_target")
            null = bone.createOutputNode('null',tw1.name() + "_target")
            null.setPosition(tw1.position() + hou.Vector2(2,-1))
            null.parm("tz").set( - bone.parm("length").eval())
            
            ik = chopnet.createNode('inversekin',tw1.name() + "_ik")
            ik.parm('bonerootpath').set('../../' + tw1.name())
            ik.parm('boneendpath').set('../../' + tw1.name())
            ik.parm('solvertype').set(2)
            ik.parm('endaffectorpath').set('../../' + null.name())
            
            tw1.parm('solver').set('../' + chopnet.name() + "/"+ ik.name())
            
            # add rotate controlls
            ptg = null.parmTemplateGroup()
            ptg.clear()
            parm = hou.FloatParmTemplate('Rotate_Final','Rotate_Final',1)
            parm.setDefaultExpression(('ch("IK_Rotate")*(1-ch("IK_FK")) + ch("FK_Rotate")*ch("IK_FK")',))
            ptg.addParmTemplate(parm)
            parm = hou.FloatParmTemplate('IK_FK','IK_FK',1,min=0, max=1,min_is_strict=True, max_is_strict=True)
            side_prefix = null.name().split("_")[0]     
            side_name_str = 'right' if side_prefix=='R' else 'left'
            expression = '1-ch("../' + side_name_str + 'handfkikblend")'
            parm.setDefaultExpression((expression,))
            ptg.addParmTemplate(parm)
            parm = hou.FloatParmTemplate('IK_Rotate','IK_Rotate',1)
            expression = 'ch("../' + side_prefix + '_Hand_handroot/rz")'
            parm.setDefaultExpression((expression,))
            ptg.addParmTemplate(parm)
            parm = hou.FloatParmTemplate('FK_Rotate','FK_Rotate',1)
            expression = '-ch("../'+ side_prefix + '_Hand_fkcontrol/rz")'
            parm.setDefaultExpression((expression,))
            ptg.addParmTemplate(parm)
            # Add Ramp Here??
            null.setParmTemplateGroup(ptg)        
            fixSpareFolders(null)                 
            
            # set rotates
            tw2.parm("rz").setExpression('-ch("../' + null.name() +'/Rotate_Final")*0.25')
            tw3.parm("rz").setExpression('-ch("../' + null.name() +'/Rotate_Final")*0.25')
            tw4.parm("rz").setExpression('-ch("../' + null.name() +'/Rotate_Final")*0.25')
    
            # Hide Null
            null.setSelectableInViewport(0)
            null.setDisplayFlag(0)
                    
            # network box
            nb = bone.parent().createNetworkBox()
            nb.addNode(tw1)
            nb.addNode(tw2)
            nb.addNode(tw3)
            nb.addNode(tw4)
            nb.addNode(null)
            nb.addNode(chopnet)
            nb.fitAroundContents()
            
            
            
            ]]></script>
  </tool>

  <tool name="bone between nulls" label="bone between nulls" icon="hicon:/SVGIcons.index?DOP_noconrel.svg">
    <helpText><![CDATA["""nulls should be connected
pick the root null
creates a bone between two connected nulls
pick as many roots as you like"""]]></helpText>
    <script scriptType="python"><![CDATA[import lzrig

for n in hou.selectedNodes():
    end = n.outputs()[0]  

    #create bone node
    bone = n.createOutputNode("bone",n.name() + "_bone")
    bone.setPosition(n.position() + hou.Vector2(9.99746844172e-05,-1.00132469978))
    bone.parm("rx").set(180.0)
    bone.parm("length").set(end.parm("tz").eval())
    
    end.parm("keeppos").set(1)
    end.setInput(0,bone)
    
    lzrig.cleanTransfrom(bone)    
    lzrig.cleanTransfrom(end)
    
    
#if len(hou.selectedNodes())>1:
#    n1 = hou.selectedNodes()[0]
#    n2 = hou.selectedNodes()[1]
#    
#    w1 = n1.worldTransform()
#    w2 = n2.worldTransform()
#    
#    p1 = w1.extractTranslates()
#    p2 = w2.extractTranslates()
#    
#    dir = (p2-p1)/(p2-p1).length();
#    #transform = hou.Matrix4()
#    m =  dir.matrixToRotateTo(hou.Vector3(0,0,-1))
#    
#    bone = n1.createOutputNode('bone')
#    bone.setPreTransform(m.inverted())
#    bone.parm('length').set((p2-p1).length())
    
    
    ]]></script>
  </tool>

  <tool name="copy PreTranform" label="copy PreTranform" icon="hicon:/SVGIcons.index?OBJ_STATE_dynamicparent.svg">
    <script scriptType="python"><![CDATA[if len(hou.selectedNodes())>1:
    n1 = hou.selectedNodes()[0]
    n2 = hou.selectedNodes()[1]
    
    n1.setPreTransform(n2.preTransform())
    
    
    
    
    
    ]]></script>
  </tool>

  <tool name="select all bones" label="Select all bones" icon="hicon:/SVGIcons.index?OBJ_tooncharacter.svg">
    <script scriptType="python"><![CDATA[for n in hou.selectedNodes():
    n.setSelected(0)

editor = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
nodes = editor.pwd().children()
for node in nodes:
    if node.type().name() == 'bone':
        node.setSelected(1)]]></script>
  </tool>

  <tool name="create static Hooks" label="create static Hooks" icon="hicon:/SVGIcons.index?MISC_starthere.svg">
    <helpText><![CDATA["""Creates an output null for each 'piece' attribute on primitives in a dispay node of a selected subnetwork"""]]></helpText>
    <script scriptType="python"><![CDATA[for subnet in hou.selectedNodes():
    n = subnet.displayNode()
    g = n.geometry()
    prims = g.prims()
    i = 0
    for p in prims:
        if subnet.parent().node(p.attribValue('piece')) is None:
            print p.attribValue('piece')
            hook = subnet.parent().createNode('null',p.attribValue('piece'))
            hook.setPosition(subnet.position() + hou.Vector2(2,-i))
            i = i+1
            hook.setColor(hou.Color(1,1,1))             ]]></script>
  </tool>

  <tool name="update curve CVs" label="update curve CVs" icon="hicon:/SVGIcons.index?OBJ_path.svg">
    <helpText><![CDATA["""select Path first, then CVs in correct order"""


]]></helpText>
    <script scriptType="python"><![CDATA[if len(hou.selectedNodes()) > 1:
    nodes = list(hou.selectedNodes())
    path = nodes.pop(0)
    if path.type().name() == 'path':
        merge = path.node('points_merge')
    
        merge.parm('numobj').set(len(nodes))
        i = 1
        for cv in nodes:
            merge.parm('objpath' + str(i)).set("../../" + cv.name() + "/points")
            i += 1]]></script>
  </tool>

  <tool name="Create Fetch" label="Create Fetch" icon="hicon:/SVGIcons.index?OBJ_fetch.svg">
    <helpText><![CDATA["""Creates a fetch node for a parent of selected node"""]]></helpText>
    <script scriptType="python"><![CDATA[for n in hou.selectedNodes():
    #n.parm('keeppos').set(1)
    parent = n.inputs()[0]
    fetch = n.createInputNode(0,'fetch',"Fetch_" + parent.name())
    fetch.setPosition(n.position() + hou.Vector2(0,1))
    fetch.parm('fetchobjpath').set(fetch.relativePathTo(parent))
    fetch.parm('useinputoffetched').set(1)
    fetch.setDisplayFlag(0)
    ]]></script>
  </tool>

  <tool name="Xray" label="Xray" icon="hicon:/SVGIcons.index?SOP_attribcast.svg">
    <helpText><![CDATA["""Click to turn Xray ON, Ctrl+Click to turn Xray OFF """]]></helpText>
    <script scriptType="python"><![CDATA[for n in hou.selectedNodes():
    n.useXray(kwargs['ctrlclick'] == False)
]]></script>
  </tool>

  <tool name="Create Sphere in Pivot" label="Create Sphere in Pivot" icon="hicon:/SVGIcons.index?BUTTONS_match_rotation.svg">
    <helpText><![CDATA["""Create a null located at pivot for each selected transform"""]]></helpText>
    <script scriptType="python"><![CDATA[for n in hou.selectedNodes():
    if n.type().name() == 'xform':
        null = n.parent().parent().createNode('null')
        null.parm('controltype').set(1)
        null.parm('geoscale').set(0.1)
        null.parmTuple('t').set(n.parmTuple('p').eval())
        null.setColor(hou.Color(1,0.5,0.2))]]></script>
  </tool>

  <tool name="copy world transform" label="copy world transform" icon="hicon:/SVGIcons.index?BUTTONS_global.svg">
    <helpText><![CDATA["""Copies the world transform of the first selected node to the second selected node(you need to select two nodes)"""]]></helpText>
    <script scriptType="python"><![CDATA[nodes = hou.selectedNodes()
if len(nodes)>1:
    src = nodes[0]
    dst = nodes[1]
    dst.setWorldTransform(src.worldTransform())]]></script>
  </tool>

  <tool name="Add Controls On Curve" label="Add Controls On Curve" icon="hicon:/SVGIcons.index?CHANNELS_handles_tie.svg">
    <helpText><![CDATA["""Select the path to add center controll to"""]]></helpText>
    <script scriptType="python"><![CDATA[rate = 240

for n in hou.selectedNodes():
    # Create Follow Path Null
    null = n.createOutputNode('null',n.name() + "_sub_tr")
    chop = null.createNode('chopnet','constraints')
    getWS = chop.createNode('constraintgetworldspace')
    getWS.parm('obj_path').set('../..')
    getWS.parm('vex_rate').set(rate) #not sure why
        
    followPath = getWS.createOutputNode('constraintpath')
    followPath.parm('soppath').set('`opinputpath("../..",0)`')
    followPath.parm('pos').set(0.5)
    followPath.parm('vex_rate').set(rate)
    followPath.parm("lookupmode").set(1)
    followPath.setAudioFlag(True)
    
    null.parm('constraints_on').set(1)
    null.parm('constraints_path').set('constraints')
    
    # Create Controll
    ctrl = null.createOutputNode('null',n.name() + "_sub_ctrl")
    #ctrl.parm('rx').set(180)
    #ctrl.setPreTransform(ctrl.parmTransform())
    #ctrl.setParmTransform(hou.Matrix4(1))
    
    new_cv = ctrl.createOutputNode('pathcv',n.name() + '_high_cv0')
    
    # Create new Path
    parent = n.inputs()[0]
    path = parent.createOutputNode('path',n.name() + '_high')
    path.setPosition(n.position() + hou.Vector2(2,0))
      
    # update merge
    merge = path.node('points_merge')
    merge.parm('numobj').set(3)
    merge.parm('objpath1').set( n.node('points_merge').parm('objpath1').evalAsString())
    merge.parm('objpath3').set( n.node('points_merge').parm('objpath2').evalAsString())
    
    merge.parm('objpath2').set( "../../" + new_cv.name() + "/points")
        
    #i = 1
    #for cv in nodes:
    #    merge.parm('objpath' + str(i)).set("../../" + cv.name() + "/points")
    #    i += 1
    
    n.setDisplayFlag(False)
    n.setSelectableInViewport(False)
    path.setSelectableInViewport(True)
    path.setDisplayFlag(0)
    null.setDisplayFlag(False)
    null.setSelectableInViewport(False)
    new_cv.setDisplayFlag(False)
    new_cv.setSelectableInViewport(False)
    
    
    
    
    
    
    
    ]]></script>
  </tool>

  <tool name="AUTORIG" label="AUTORIG" icon="hicon:/SVGIcons.index?CROWDS_agent2.svg">
    <script scriptType="python"><![CDATA[d = hou.ui.curDesktop()

import ctypes
user32 = ctypes.windll.user32
sz = int (user32.GetSystemMetrics(0)),int( user32.GetSystemMetrics(1))
dy = [0.4,0.95];
dx = [0.5,0.8];    

pos = (sz[0]+ int(sz[0]*dx[0]),int(sz[1]*(dy[0])))
size = int(sz[0]*(dx[1] - dx[0])),int(sz[1]*(dy[1]-dy[0]))  
panel = d.createFloatingPanel(hou.paneTabType.,pos,size)]]></script>
  </tool>

  <tool name="Copy World Transform" label="Copy World Transform" icon="hicon:/SVGIcons.index?BUTTONS_global.svg">
    <helpText><![CDATA["""Normal:Copies the world transform of the first selected node to the second selected node
ALt: Reverse normal operation
Ctrl: Copies name of the embeded node to the node at obj level
Shift: Select all targets and AutorigAsset consequently. Copies world transforms of autorig pieces to targets
UPDDATE HELP! IT's NOT UP TO DATE!!"""]]></helpText>
    <script scriptType="python"><![CDATA[ctrlclick = kwargs['ctrlclick']
shiftclick = kwargs['shiftclick']
altclick = kwargs['altclick']

if ctrlclick :
    # rename
    nodes = hou.selectedNodes()
    if len(nodes)>1:
        src = nodes[0]
        dst = nodes[1]
        if src.parent().path() == '/obj':
            src.setName(dst.name()+"_tempHook",True)            
            src.setColor(hou.Color(0.5,0.5,0.8))
        else:
            dst.setName(src.name()+"_tempHook",True)            
            dst.setColor(hou.Color(0.5,0.5,0.8))
else:
    # copy orientations
    nodes = hou.selectedNodes()
    if len(nodes)>1:
        if altclick:
            src = nodes[0]
            dst = nodes[1]
        else:
            dst = nodes[0]
            src = nodes[1]
            
        if shiftclick:
            dst.setWorldTransform(src.worldTransform())
        else:
            swt = src.worldTransform()
            dwt = dst.worldTransform()        
            tr =dwt* hou.hmath.buildTranslate(swt.extractTranslates() - dwt.extractTranslates())
            dst.setWorldTransform(tr)
        
        
        ]]></script>
  </tool>

  <tool name="Create null at pivot" label="Create null at pivot" icon="hicon:/SVGIcons.index?BUTTONS_match_rotation.svg">
    <helpText><![CDATA["""Create a null located at pivot for each selected transform
CtrlClick: Creates a target for an autorig asset"""]]></helpText>
    <script scriptType="python"><![CDATA[ctrlclick = kwargs['ctrlclick']

if ctrlclick :
    for n in hou.selectedNodes():
        null = n.parent().parent().createNode('null')
        null.parm('controltype').set(1)
        null.parm('geoscale').set(0.1)
        null.setWorldTransform(n.worldTransform())
        null.setColor(hou.Color(1,0.5,0.2))
        null.setName(n.name()+"_tempHook",True)   
        null.setColor(hou.Color(0.5,0.5,0.8))
else:
    for n in hou.selectedNodes():
        if n.type().name() == 'xform':
            null = n.parent().parent().createNode('null')
            null.parm('controltype').set(1)
            null.parm('geoscale').set(0.1)
            null.parmTuple('t').set(n.parmTuple('p').eval())
            null.setColor(hou.Color(1,0.5,0.2))]]></script>
  </tool>

  <tool name="Fix Autorig" label="Fix Autorig" icon="hicon:/SVGIcons.index?OBJ_autorig_blank.svg">
    <helpText><![CDATA["""Copies positions from nulls at upper level with the same names
ctrl+click: copies orientations too"""]]></helpText>
    <script scriptType="python"><![CDATA[ctrlclick = kwargs['ctrlclick']

def fixNode(n):
    hook =  n.parent().parent().node(n.name() + "_tempHook")
    if hook is not None:
        if ctrlclick:
            n.setWorldTransform(hook.worldTransform())
        else:        
            swt = hook.worldTransform()
            dwt = n.worldTransform()        
            tr =dwt* hou.hmath.buildTranslate(swt.extractTranslates() - dwt.extractTranslates())
            n.setWorldTransform(tr)        
        
    for child in n.outputs():
        fixNode(child)

for n in hou.selectedNodes():
    fixNode(n)]]></script>
  </tool>

  <tool name="Add Axis" label="Add Axis" icon="hicon:/SVGIcons.index?OBJ_null.svg">
    <script scriptType="python"><![CDATA[for n in hou.selectedNodes():
    ax = n.createOutputNode('LZ_axis')
    ax.parm('scale').set(0.025)
    ax.setPosition(n.position() + hou.Vector2(1,-6))]]></script>
  </tool>

  <tool name="Stretch Chain Setup" label="Stretch Chain Setup" icon="hicon:/SVGIcons.index?NETVIEW_image_link_located.svg">
    <script scriptType="python"><![CDATA[def fixSpareFolders(node):
    ptg = node.parmTemplateGroup()
    folders = ptg.entries()
    for folder in folders:
        folder.setFolderType(hou.folderType.Simple)
        ptg.replace(folder.name(),folder)
    node.setParmTemplateGroup(ptg) 

nodes = hou.selectedNodes()    
ik = nodes[0].node(nodes[0].parm('solver').eval())
curve = ik.node(ik.parm('curvepath').eval())


for n in nodes:
    if n.type().name() == 'bone':
        ptg = n.parmTemplateGroup()
        ptg.clear()
        
        parm = hou.IntParmTemplate('bone_id','Bone ID',1)
        parm.setDefaultExpression(('ch("../"+opinput(".",0)+"/bone_id")+1',))
        ptg.addParmTemplate(parm)
        parm = hou.FloatParmTemplate('rest_length','Rest Length',1,[n.parm("length").eval()])
        ptg.addParmTemplate(parm)
        parm = hou.FloatParmTemplate('stretched_length','Stretched Length',1,[n.parm("length").eval()*2])
        ptg.addParmTemplate(parm)
        parm = hou.FloatParmTemplate('real_length','Real Length',1)
        expression = 'fit01(ch("blend"),ch("rest_length"),ch("stretched_length")+ch("rest_length"))'
        parm.setDefaultExpression((expression,))
        ptg.addParmTemplate(parm)
        parm = hou.FloatParmTemplate('blend','Blend',1,[0],min=0, max=1,min_is_strict=True, max_is_strict=True)
        expression = '(ch("curve_len")-ch("nbones")*ch("rest_length")-ch("stretched_length")*(ch("bone_id")-1))/ch("stretched_length")'
        parm.setDefaultExpression((expression,))
        ptg.addParmTemplate(parm)
        parm = hou.FloatParmTemplate("curve_len","Curve Length",1,[hou.hscriptExpression('arclen("' + curve.path() + '", 0, 0, 1)/' + str(len(nodes)))])
        parm.setDefaultExpression(('arclen("' + n.relativePathTo(curve) + '", 0, 0, 1)',))
        ptg.addParmTemplate(parm)
        parm = hou.IntParmTemplate('nbones','N Bones',1,[len(nodes)])
        ptg.addParmTemplate(parm)
        
        
        n.setParmTemplateGroup(ptg) 
        fixSpareFolders(n)
        
        n.parm("length").setExpression('ch("real_length")')        
        if n.inputs()[0].type().name() != 'bone':
            n.parm("bone_id").deleteAllKeyframes()
        
        
        ]]></script>
  </tool>

  <tool name="Fix Absolute Paths" label="Fix Absolute Paths" icon="hicon:/SVGIcons.index?BUTTONS_parmmenu_connected.svg">
    <helpText><![CDATA["""switch absolute paths to reletive for all selected nodes and chop net child nodes"""]]></helpText>
    <script scriptType="python"><![CDATA[def fixAbsPaths(n):
    parms = n.parms()
    for p in parms:
        pt = p.parmTemplate()
        if pt.type() == hou.parmTemplateType.String :
            if pt.stringType() == hou.stringParmType.NodeReference :
                if p.evalAsString() != '' :
                    if p.evalAsString().startswith('/obj'):
                        target = n.node(p.evalAsString())
                        p.set(n.relativePathTo(target))

for n in hou.selectedNodes():
    fixAbsPaths(n)
    if n.type().name() == 'chopnet':
        for child in n.children():
            fixAbsPaths(child)]]></script>
  </tool>

  <tool name="Extract Maya Bones" label="Extract Maya Bones" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[for n in hou.selectedNodes():
    hook = n.createOutputNode('null',n.name()+'_hook')
    hook.setParmTransform(n.worldTransform())
    hook.parmTuple('s').set([1,1,1])
    hook.setInput(0,None)
    hook.setPosition(n.position() + hou.Vector2(-2,0))

    hook.setPreTransform(hook.parmTransform()*hook.preTransform())
    hook.setParmTransform(hou.Matrix4(1))
    hook.parm('keeppos').set(1)
    hook.parm('geoscale').set(0.1)
    ]]></script>
  </tool>

  <tool name="LZ Create Spine" label="LZ Create Spine" icon="hicon:/SVGIcons.index?OBJ_autorig_spine_3.svg">
    <helpText><![CDATA["""creates a fk controll setup(select end null)
ctrl+click: uses 3 bones for it
alt+click: creates a bone chain from it"""]]></helpText>
    <script scriptType="python"><![CDATA[def makeCirceControll(null,scale):
    null.parm("geoscale").set(scale)
    null.parm("controltype").set(1)
    null.parm("orientation").set(3)

def addNull(parent,offset,scale):
    null = parent.createOutputNode('null',parent.name())
    null.setPosition(parent.position() + hou.Vector2(0.0,-1.1689023184))
    null.parm("tz").set(offset)
    null.setColor(hou.Color(0.1,0.4,0.8))
    makeCirceControll(null,scale)
    null.parm("keeppos").set(1)
    
    return null
    
def CreatePath(start,end,scale):
    #create path1 node
    path1 = start.createOutputNode("path",start.name() + "_path")
    path1.setPosition(start.position() + hou.Vector2(4.58636315262,-1.16890232436))
    path1.setDisplayFlag(0)
    path1.setSelectableInViewport(1)
    
    def CreateCV(start):
        #create pathcv1 node
        pathcv0 = start.createOutputNode("pathcv",start.name() + "_CV0")
        pathcv0.setPosition(start.position() + hou.Vector2(2.50949768387,-1.16890232436))
        pathcv0.setDisplayFlag(0)
        pathcv0.parm("rx").set(180.0)
        pathcv0.parm("scale").set(scale/3)
        pathcv0.setSelectableInViewport(0)
        return pathcv0
        
    cv0 = CreateCV(start)
    cv1 = CreateCV(end)
    # update Cvs
    merge = path1.node('points_merge')
    merge.parm('numobj').set(2)
    merge.parm('objpath1').set("../../" + cv0.name() + "/points")
    merge.parm('objpath2').set("../../" + cv1.name() + "/points")
    
    return path1

def createBonesFromCurve(root):
    import toolutils
    sv = toolutils.sceneViewer()
    path.setSelected(1,1)
    sv.setCurrentState('bonesfromcurve',wait_for_exit = 0)
    
# MAIN    
ctrlclick = kwargs['ctrlclick']
if ctrlclick:
    num = 3
else:
    num = int(hou.ui.readInput("Number of Bones",buttons=('OK',),initial_contents= '3' )[1])   
    
for n in hou.selectedNodes():
    n.parm("keeppos").set(1)
    parent = n.inputs()[0]
    offset = float(n.parm('tz').eval() / (num-1))
    length = n.parm('tz').eval()
        
    end = addNull(parent,0,length*3)
    start = end
    
    for i in range(1,num):
        end = addNull(end,offset,length*2.5)
        
    n.setInput(0,end)
    n.setPosition(end.position() + hou.Vector2(0.0,-1.1689023184))

    makeCirceControll(end,length*3)
    
    n.setDisplayFlag(0)
    n.setSelectableInViewport(0)
    parent.setDisplayFlag(0)
    parent.setSelectableInViewport(0)
    
    path = CreatePath(start,end,length)
    
    # create bones from curve
    altclick = kwargs["altclick"]
    if altclick:
        createBonesFromCurve(start)    
    
    
    
    
        
    ]]></script>
  </tool>

  <tool name="LZ Corrective Bones" label="LZ Corrective Bones" icon="hicon:/SVGIcons.index?SOP_capturecorrect.svg">
    <script scriptType="python"><![CDATA[import lzrig
reload(lzrig)


# MAIN
altclick = kwargs["altclick"]
shiftclick = kwargs["shiftclick"]
ctrlclick = kwargs["ctrlclick"]

for n in hou.selectedNodes():    
    lzrig.createHelperBone(n,90,1)
    lzrig.createHelperBone(n,-90,1)    

]]></script>
  </tool>

  <tool name="LZ Bone Real Rotates" label="LZ Bone Real Rotates" icon="hicon:/SVGIcons.index?OBJ_STATE_aligncapturepose.svg">
    <script scriptType="python"><![CDATA[import lzrig
#reload(lzrig)

#MAIN
for n in hou.selectedNodes():
    if n.type().name() == 'bone':
        lzrig.extractIKBoneRotates(n,1)]]></script>
  </tool>

  <tool name="LZ Export IK Rotations" label="LZ Export IK Rotations" icon="hicon:/SVGIcons.index?CHANNELS_show_names.svg">
    <script scriptType="python"><![CDATA[import lzrig
reload(lzrig)

for n in hou.selectedNodes():
    lzrig.exportIKRotations(n)]]></script>
  </tool>

  <tool name="create hook bones from nulls" label="create hook bones from nulls" icon="PLASMA_App">
    <helpText><![CDATA["""
Pick null nodes.
Creates Small bones on end of each null bone.
"""]]></helpText>
    <script scriptType="python"><![CDATA[for n in hou.selectedNodes():
    bone = n.createOutputNode("bone",n.name() + "_bone")
    bone.setPosition(n.position() + hou.Vector2(-2,-1))
    bone.parm("length").set(0.2)]]></script>
  </tool>

  <tool name="LZ CleanParentRotates" label="LZ CleanParentRotates" icon="PLASMA_App">
    <helpText><![CDATA["""
Pick any paranted object.
Sets picked objects world transform rotation to Identity.
"""]]></helpText>
    <script scriptType="python"><![CDATA[for n in hou.selectedNodes():
    parent = n.inputs()[0]

    n.parm('keeppos').set(1)
    n.setInput(0,None)
    
    n.setParmTransform(n.parmTransform()*n.preTransform())
    
    n.parmTuple("r").set((0,0,0))
    n.setPreTransform(n.parmTransform())
    n.setParmTransform(hou.Matrix4(1))
    
    n.setInput(0,parent)
    ]]></script>
  </tool>

  <tool name="LZ SculptToEdit" label="LZ SculptToEdit" icon="hicon:/SVGIcons.index?SOP_deformmeta.svg">
    <script scriptType="python"><![CDATA[if len(hou.selectedNodes()) > 0:
    n = hou.selectedNodes()[0]
    
    parent = n.inputs()[0]  
    if len(hou.selectedNodes()) == 2:
        parent = hou.selectedNodes()[1]    
    
    print parent
    expr ='sopcreateedit -d ' + n.name()+ '_edit ' + parent.path() + ' ' + n.path()
    hou.hscript(expr)

    
    print expr]]></script>
  </tool>

  <tool name="extract_world_transform_to_null" label="Extract_world_transform_to_null" icon="PLASMA_App">
    <helpText><![CDATA["""Creates a null with transform equal to selected object's world transform"""]]></helpText>
    <script scriptType="python"><![CDATA[nodes = hou.selectedNodes()


for node in nodes:
    print node.worldTransform()
    t = node.parent().createNode('null',node.name() + '_transfrom')
    t.setPosition(node.position() - hou.Vector2(0,1))
    
    t.setParmTransform(node.worldTransform())
    
    ]]></script>
  </tool>
</shelfDocument>

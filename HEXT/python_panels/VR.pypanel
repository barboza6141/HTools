<?xml version="1.0" encoding="UTF-8"?>
<pythonPanelDocument>
  <!-- This file contains definitions of Python interfaces and the
 interfaces menu.  It should not be hand-edited when it is being
 used by the application.  Note, that two definitions of the
 same interface or of the interfaces menu are not allowed
 in a single file. -->
  <interface name="vr_tracker" label="VR Tracker" icon="MISC_python" showNetworkNavigationBar="false" help_url="">
    <script><![CDATA[from hutil.Qt import QtWidgets,QtCore
import openvr,time

timer_time = 100
fps = 24
capture_delta = 1.0/fps

class interface(QtWidgets.QWidget):
    def __init__(self):
        super(interface, self).__init__() 
        #create Layout
        mainLayout = QtWidgets.QGridLayout()  
            
        ReadTransform_btn = QtWidgets.QPushButton("Test")
        ReadTransform_btn.clicked.connect(self.test) 
        Init_btn = QtWidgets.QPushButton("Init")
        Init_btn.clicked.connect(self.init_vr)  
        Shutdown_btn = QtWidgets.QPushButton("Shutdown")
        Shutdown_btn.clicked.connect(self.shutdown)
        
        Start_btn = QtWidgets.QPushButton("Start")
        Start_btn.clicked.connect(self.start)
        
        StartRec_btn = QtWidgets.QPushButton("Record Anim")
        StartRec_btn.clicked.connect(self.startRecording)
        StopRec_btn = QtWidgets.QPushButton("STOP Record Anim")
        StopRec_btn.clicked.connect(self.stopRecording)
       
        mainLayout.addWidget(Init_btn)
        mainLayout.addWidget(Start_btn)
        mainLayout.addWidget(ReadTransform_btn)
        mainLayout.addWidget(StartRec_btn)
        mainLayout.addWidget(StopRec_btn)        
        mainLayout.addWidget(Shutdown_btn)
        
        self._timer = QtCore.QTimer()
        self._timer.timeout.connect(self.tick)
        
        #set Layout
        self.setStyleSheet("background-color: hsv(0,0,45);")
        self.setLayout(mainLayout)
        
    def FindNodes(self):
        self.vr_null = hou.node('/obj/VR')
        self.ctrl_null1 = hou.node('/obj/ctrl1')
        self.ctrl_null2 = hou.node('/obj/ctrl2')
        
    def updateHands(self):
        R_hand = hou.node('/obj/R_Hand_ctrl1')
        L_hand = hou.node('/obj/L_Hand_ctrl1')
        Head = hou.node('/obj/C_Head_ctrl')
        
        invert_matrix = hou.Matrix4(hou.Matrix3([1,0,0,0,1,0,0,0,-1]))
        R_hand.setWorldTransform(invert_matrix*self.ctrl_null1.worldTransform())
        invert_matrix = hou.Matrix4(hou.Matrix3([-1,0,0,0,1,0,0,0,-1]))
        L_hand.setWorldTransform(invert_matrix*self.ctrl_null2.worldTransform())
        
        invert_matrix = hou.Matrix4(hou.Matrix3([1,0,0,0,1,0,0,0,-1]))
        Head.setWorldTransform(invert_matrix*self.vr_null.worldTransform())        
        
    
    def Track(self):    
        poses = self.vrsys.getDeviceToAbsoluteTrackingPose(openvr.TrackingUniverseStanding,0,5)
        self.SetTransform(poses[0],self.vr_null)
        self.SetTransform(poses[3],self.ctrl_null1)
        self.SetTransform(poses[4],self.ctrl_null2)
        
        self.updateHands()
        
    def SetTransform(self,pose,node):
        m = pose.mDeviceToAbsoluteTracking
        view_matrix = hou.Matrix3( (m[0][0],m[0][1],m[0][2] , m[1][0],m[1][1],m[1][2] , m[2][0],m[2][1],m[2][2]) )
        view_matrix = view_matrix.transposed()
        node.setParmTransform( hou.Matrix4( view_matrix ))
        node.parm("tx").set(m[0][3])
        node.parm("ty").set(m[1][3])
        node.parm("tz").set(m[2][3])
        
    def init_vr(self):
        self._recording = False
        self.FindNodes()    
        openvr.init(openvr.VRApplication_Scene)        
        self.vrsys = openvr.IVRSystem()
        self.findControllers()
        
    def start(self):        
        self._timer.start(timer_time) 
        
    def shutdown(self):
        openvr.shutdown()  
        self._timer.stop()
        
    def tick(self):
        #print("tick")
        self.Track()
        if( self._recording):
            self.recordKeyframes()
     
    def startRecording(self):  
        print ("Started Recording")
        self._recording = True
        self._startTime = time.clock()
        self._keyframes = dict()
        
        self.nodes = ["R_Hand_ctrl1","L_Hand_ctrl1","C_Head_ctrl"]
        for node in self.nodes:
            self._keyframes[node] = [[[],0]]        
        
    def stopRecording(self):
        print ("StopRecording")
        #print self._keyframes
        self._recording = False
        self.fillKeyframes()
        
    def recordKeyframes(self):    
        currtime = time.clock() - self._startTime         
        parms = ["tx","ty","tz","rx","ry","rz"]
        
        for node in self.nodes:
            vals = []
            for parm in parms:
                val = hou.parm("/obj/" + node + "/" + parm).eval()
                vals += [val]
            self._keyframes[node] += [[vals,currtime]]
        print currtime    
        
    def fillKeyframes(self):
        print "Filling Keyframes"
        for node in self._keyframes.keys():            
            for key in self._keyframes[node]:
                if key[0] != []:
                    hou.parm("/obj/" + node + "/tx").setKeyframe(hou.Keyframe(key[0][0],key[1]))
                    hou.parm("/obj/" + node + "/ty").setKeyframe(hou.Keyframe(key[0][1],key[1]))
                    hou.parm("/obj/" + node + "/tz").setKeyframe(hou.Keyframe(key[0][2],key[1]))
                    hou.parm("/obj/" + node + "/rx").setKeyframe(hou.Keyframe(key[0][3],key[1]))
                    hou.parm("/obj/" + node + "/ry").setKeyframe(hou.Keyframe(key[0][4],key[1]))
                    hou.parm("/obj/" + node + "/rz").setKeyframe(hou.Keyframe(key[0][5],key[1]))
        
        
    def test(self):
        c1 = self.vrsys.getControllerStateWithPose(openvr.TrackingUniverseStanding,self.right)
        print c1
        print ("Touch",c1[1].ulButtonTouched)
        print ("Press",c1[1].ulButtonPressed)

        self.SetTransform(c1[2],self.ctrl_null1)
        
    def findControllers(self):
        self.left = None
        self.right = None
        for i in range(openvr.k_unMaxTrackedDeviceCount):
            device_class = self.vrsys.getTrackedDeviceClass(i)
            if device_class == openvr.TrackedDeviceClass_Controller:
                role = self.vrsys.getControllerRoleForTrackedDeviceIndex(i)
                if role == openvr.TrackedControllerRole_RightHand:
                    self.right = i
                if role == openvr.TrackedControllerRole_LeftHand:
                    self.left = i
                    
        print self.left
        print self.right
        
    
    
def createInterface():
    return interface()          
        ]]></script>
    <includeInToolbarMenu menu_position="411" create_separator="false"/>
    <help><![CDATA[]]></help>
  </interface>
</pythonPanelDocument>

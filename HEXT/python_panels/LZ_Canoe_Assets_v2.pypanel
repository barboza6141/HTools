<?xml version="1.0" encoding="UTF-8"?>
<pythonPanelDocument>
  <!-- This file contains definitions of Python interfaces and the
 interfaces menu.  It should not be hand-edited when it is being
 used by the application.  Note, that two definitions of the
 same interface or of the interfaces menu are not allowed
 in a single file. -->
  <interface name="lz_canoe_assets_v2" label="LZ Canoe Assets v2" icon="MISC_python" showNetworkNavigationBar="false" help_url="">
    <script><![CDATA[from hutil.Qt import QtWidgets,QtGui,QtCore
from collections import OrderedDict
import glob
import os
import toolutils
import lzutil
import re
import json

# add MMBClick to remove tab
# add top bar?
# add hotkeys?
# hide the top thing
# make it as an asset?

regex = r"(\D)(\d\d\d\d)(\D)"

#------------------------ Custom Classes --------------------------------------#

class my_QScrollArea(QtWidgets.QScrollArea):
    def __init__ (self, file_path ,parent = None):
        super(my_QScrollArea, self).__init__(parent)
        self.file_path = file_path

class QCustomTabWidget (QtWidgets.QTabWidget):
    def __init__ (self, parent = None):
        super(QCustomTabWidget, self).__init__(parent)
        self.setTabsClosable(True)
        self.tabCloseRequested.connect(self.closeTab)

    def closeTab (self, currentIndex):        
        currentQWidget = self.widget(currentIndex)
        if  self.tabText(currentIndex) != "ROOT":
            currentQWidget.deleteLater()
            self.removeTab(currentIndex)
            self.parent().saveLoadedTabs()
        
    #def mouseReleaseEvent(self, event):
    #    print "MOUSE RELEASE"l
    #    if event.button() == QtCore.Qt.MouseButton.MidButton:
    #        print "close"
    #    super(QCustomTabWidget,self).mouseReleaseEvent(event)
            
        
class myTreeView(QtWidgets.QTreeView):
    def __init__(self, app):
        super(myTreeView,self).__init__(None)
        self.app = app
        
    def mouseReleaseEvent(self, event):
        if event.button() == QtCore.Qt.MouseButton.MidButton:
            point =  event.pos()            
            index = self.indexAt(point)           
        
            if not index.isValid():
                return
                
            model = self.model()
            file_path = model.filePath(index)
            self.app.CreateNewTab(file_path,index.data())
            
        super(myTreeView,self).mouseReleaseEvent(event)

# ------------------------------ Custom Classes End ---------------------------#
        
class CanoeAssets(QtWidgets.QWidget):
    def __init__(self):               
        super(CanoeAssets, self).__init__() 
        self.setStyleSheet("background-color: hsv(0,0,45);")
        
        self.json_filename = "S:/LZ_RS_CanoeAssets.json"
        
        self.mainLayout = QtWidgets.QGridLayout()    
        self.tabs = QCustomTabWidget()   
                
        self.CreateNewTab(save_tabs = False)
        self.LoadTabHistory()
        
        self.mainLayout.addWidget(self.tabs)        
        self.setLayout(self.mainLayout)   
    
        
    def add_tab(self,tab,tab_name):
        self.tabs.addTab(tab,tab_name)  
       
    def CreateNewTab(self,root_path = '',tab_name = "ROOT", save_tabs = True):
        model = QtWidgets.QFileSystemModel()
        model.setNameFilters(['*.rs','*.obj',"*.bgeo.sc","*.abc","*.fbx"]) 
        model.setRootPath(root_path)
        model.setNameFilterDisables(0)        
        tree = myTreeView(self)
        tree.setModel(model)
        tree.setRootIndex(model.index(root_path))
        tree.setAnimated(False)
        tree.setIndentation(20)
        tree.setSortingEnabled(True)
        tree.hideColumn(1)
        tree.hideColumn(2)
        tree.hideColumn(3)        
        tree.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        tree.customContextMenuRequested.connect(self.treeContextMenu)        
        self.add_tab(tree,tab_name)  
        if save_tabs:
            self.saveLoadedTabs()
    
    def saveLoadedTabs(self):
        tabs = []
        for i in range(0,self.tabs.count()):
            tab_name =  self.tabs.tabText(i)
            tab_dict = dict()
            tab_dict['name'] = tab_name
            
            if type(self.tabs.widget(i)) is my_QScrollArea:
                #tabs_dict[tab_name] = self.tabs.widget(i).file_path 
                tab_dict['path'] = self.tabs.widget(i).file_path
                tab_dict['type'] = "gal"
            elif type(self.tabs.widget(i)) is myTreeView:            
                model = self.tabs.widget(i).model()
                root_path = model.rootPath()
                #tabs_dict[tab_name] = root_path
                tab_dict['path'] = root_path
                tab_dict['type'] = "tree"
                
            tabs += [tab_dict]
                
        filename = self.json_filename
        with open(filename, 'w') as jsonfile:
            json.dump(tabs, jsonfile,sort_keys=False)

    def LoadTabHistory(self):
        filename = self.json_filename
        if os.path.isfile(self.json_filename):
            with open(filename, 'r') as jsonfile:    
                tab_history = json.load(jsonfile)
            for tab in tab_history:
                if tab["path"] != "":                   
                    if tab["type"] == "tree":
                        self.CreateNewTab(tab["path"],tab["name"],save_tabs = False) 
                    elif tab["type"] == "gal":
                        self.openGalleryInNewTab(tab["path"],tab["name"],save_tabs = False)
                
                
    # CONTEXT MENU FOR THE TREE    
    def treeContextMenu(self,point):
        current_tree = self.tabs.currentWidget()
        index = current_tree.indexAt(point)
       
        if not index.isValid():
            return
        
        name = index.data()
        model = current_tree.model()
        file_path = model.filePath(index)
        
        # We build the menu.
        menu = QtWidgets.QMenu()        
        
        openInNewTab_action = 0
        openGalleryInNewTab = 0
        loadAsset_action = 0
        loadAssetAnim_action = 0   
        loadAssetFolder_action = 0
        loadRsAnimCaches = 0
                
        if os.path.isdir(file_path):
            openInNewTab_action = menu.addAction("Open in new tab")
            openGalleryInNewTab = menu.addAction("Open gallery in new tab")
            menu.addSeparator()
            loadAssetFolder_action = menu.addAction("Load RS Asset")
            loadRsAnimCaches = menu.addAction("Load RS Anim Caches")
            
        if os.path.isfile(file_path):
            loadAsset_action = menu.addAction("Load Asset")
            
            #check for regex
            #(\D)(\d\d\d\d)(\D)  \1<UDIM>\3
            #filename = re.sub(n.parm("udim_regex1").eval(),n.parm("udim_regex2").eval(),filename)
            if re.search(regex,file_path) is not None:
                loadAssetAnim_action = menu.addAction("Load Animation")                
            
        menu.addSeparator()

        action = menu.exec_(current_tree.mapToGlobal(point))   
        
        if action == openInNewTab_action:
            self.CreateNewTab(file_path,name)  
        elif action == loadAssetFolder_action:
            loadRsAssetFromFolder(file_path)
        elif action == loadRsAnimCaches:
            loadRsAnimCachesFromFolder(file_path)            
        elif action == loadAsset_action:
            ext = os.path.splitext(os.path.basename(file_path))[-1]
            if ext == ".rs": 
                loadRsAssetSimple(file_path)
        elif action == loadAssetAnim_action:            
            loadRsAssetSimple(file_path,True)
        elif action == openGalleryInNewTab:
            self.openGalleryInNewTab(file_path,name)

    def openGalleryInNewTab(self,file_path,name,save_tabs = True):
        #scrollArea = QtWidgets.QScrollArea()  
        scrollArea = my_QScrollArea(file_path)  
        scrollArea.setWidgetResizable(True)
        scrollWidget = QtWidgets.QWidget()
        scrollArea.setWidget(scrollWidget) 
        scrollLayout = QtWidgets.QGridLayout()
        
        files = glob.glob(file_path + "\*\*.rs")
        filterFilesByParentFolders(files)
        files = filterFilesByParentFolders(files)
        
        i = 0
        rows = 4
        for rs_file in files:
            button_size = 150
            assetWidget = QtWidgets.QPushButton(os.path.basename(os.path.dirname(rs_file)))
            assetWidget.setFixedSize(button_size,button_size)               
            # check for preview
            previewPath = os.path.dirname(rs_file) + "\\preview.jpg"
            if os.path.isfile(previewPath):
                assetWidget.setIcon(QtGui.QIcon(QtGui.QPixmap(previewPath)))
                assetWidget.setIconSize(QtCore.QSize(button_size, button_size))
                assetWidget.setText("")
            # connect clicked action
            assetWidget.clicked.connect(lambda _file=os.path.dirname(rs_file):loadRsAssetFromFolder(_file))
            # add to layout
            scrollLayout.addWidget(assetWidget,i/rows,i%rows)
            i+=1   
                
        scrollWidget.setLayout(scrollLayout)
        self.add_tab(scrollArea,name)  
        if save_tabs:
            self.saveLoadedTabs()
        
###=========================== CANOE ASSETS CLASS END ==============================###        

def filterFilesByParentFolders(files):
    parents = []
    out_files = []
    for file in files:
        if os.path.dirname(file) not in parents:
            parents += [os.path.dirname(file)]
            out_files += [file]    
    return out_files
    
def has_regex(file_path):
    return re.search(regex,file_path) is not None            
    
def regex_replace(path,replace = "$F4"):
    return re.sub(regex,r'\1'+replace+r'\3',path)

def loadRsAnimCachesFromFolder(path):
    assets = glob.glob(path + "/*.rs")
    assets += glob.glob(path + "/*/*.rs")
    
    # filter caches
    caches_converted = []
    caches_base = []
    for asset in assets:
        asset = asset.replace("\\","/")
        replaced_path = regex_replace(asset,r'$F4')
        if replaced_path not in caches_converted:
            caches_converted += [replaced_path]
            caches_base += [asset]
            
    for cache in caches_base:
        loadRsAssetSimple(cache,animated = True )

def loadAllRsAssetFromFolder(path = ""):
    assets = glob.glob(path + "/*.rs")
    for asset in assets:
        asset = asset.replace("\\","/")
        loadRsAssetSimple(asset)
        
def loadRsAssetFromFolder(path = ""):
    assets = glob.glob(path + "/*.rs")
    if len(assets) == 1:
        # load single asset
        loadRsAssetSimple(assets[0])
    elif len(assets) > 1:
        # check if assets are versioned
        asset_dict = dict()

        for asset in assets:
            asset = asset.replace("\\","/")
            replaced_path = regex_replace(asset,r'__version__')
            if replaced_path in asset_dict:
                asset_dict[replaced_path]["versions"] += 1
            else:
                asset_dict[replaced_path] = dict()
                asset_dict[replaced_path]["versions"] = 1
                asset_dict[replaced_path]["base_path"] = asset
        
        for asset in asset_dict:
            loadRsAssetSimple(asset_dict[asset]["base_path"], versions = asset_dict[asset]["versions"] )
        
        
# Function To Load Assets and sequences
def loadRsAssetSimple(path = "",animated = False,versions = 1):
    # Check if file on disk
    if not (animated or versions > 1):
        if not os.path.isfile(path):
            print ("File not found: \n" + path)
            return    
    
    # Create Holder Node
    obj_node = hou.node("/obj")
    name = os.path.basename(os.path.dirname(path)) 
    holder = obj_node.createNode("geo","RS_Proxy_" + name)    
    holder.moveToGoodPosition()        
    
    fixed_path = path
    if animated:
        holder.parm("RS_objprop_proxy_prevAnimated").set(1)
        fixed_path = re.sub(regex,r'\1$F4\3',path)
    if versions > 1:
        # create versions spare parm
        version_parm = hou.IntParmTemplate("asset_version", "Asset Version", 1, default_value=([1]), min=1, max=int(versions),min_is_strict=True, max_is_strict=True)
        ptg = holder.parmTemplateGroup()
        ptg.addParmTemplate(version_parm)
        holder.setParmTemplateGroup(ptg)
        fixed_path = regex_replace(path,r'`padzero(4,ch("asset_version"))`')
    
    holder.parm("RS_objprop_proxy_enable").set(1)
    holder.parm("RS_objprop_proxy_file").set(fixed_path)
    holder.parm("RS_objprop_inst_ignorePivot").set(1)
    
    # def check Filesize (only if the file exists)
    if os.path.isfile(path):
        filesize  = os.path.getsize(path) * 1e-6
        if filesize < 50 :    
            holder.parm("RS_objprop_proxy_preview").set(2)    
            
    # Create Preview Geometry
    # if we have animated geo there's no point in createing LZRSLOADPROXIES
    if not animated:
        load_proxy = holder.createNode("attribwrangle","load_proxy")
        load_proxy.parm("class").set(0)
        load_proxy.parm("snippet").set('int pt = addpoint(0,@P);\nstring instancefile = chs("file");\nsetpointattrib(0,\'instancefile\',pt,instancefile);')
    
        rs_file_parm = hou.StringParmTemplate("file", "File", 1, string_type=hou.stringParmType.FileReference)
        addParm(load_proxy,rs_file_parm)
        
        load_proxy.parm("file").set('`chs("../RS_objprop_proxy_file")`')
        load_proxy.setDisplayFlag(True) 
        
        LZ_RS_InstanceProxies = load_proxy.createOutputNode('LZ_RS_InstanceProxies')
        LZ_RS_InstanceProxies.setDisplayFlag(1)              
    else:
        # load preview geometry
        if os.path.isfile(path.replace(".rs",".bgeo.sc")):
            file = holder.createNode('file')
            file.parm("file").set( path.replace(".rs",".bgeo.sc"))
            # make it packed
            file.parm("loadtype").set(4)
            file.parm("viewportlod").set(0)
        else:
            holder.createNode('redshift_proxySOP')  

def addParm(n,parm):
    ptg = n.parmTemplateGroup()
    ptg.addParmTemplate(parm) 
    n.setParmTemplateGroup(ptg)
   
        
def onCreateInterface():
    return CanoeAssets()]]></script>
    <includeInToolbarMenu menu_position="412" create_separator="false"/>
    <help><![CDATA[]]></help>
  </interface>
</pythonPanelDocument>
